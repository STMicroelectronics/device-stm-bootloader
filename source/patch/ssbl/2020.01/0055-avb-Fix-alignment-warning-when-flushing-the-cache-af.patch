From d4ee7b7ea78ffee1ae23d1665a61bc1aeb48fe7a Mon Sep 17 00:00:00 2001
From: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
Date: Thu, 5 Aug 2021 13:57:59 +0200
Subject: [PATCH 1/2] avb: Fix alignment warning when flushing the cache after
 read

The function read_from_partition needs a buffer "cache aligned" to avoid
warning during the flush_cache operation.

Use malloc_cache_aligned service instead of malloc.


Signed-off-by: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
---
 cmd/avb.c                      |  3 ++-
 lib/libavb/avb_slot_verify.c   |  4 ++--
 lib/libavb/avb_sysdeps.h       | 11 +++++++++++
 lib/libavb/avb_sysdeps_posix.c |  5 +++++
 lib/libavb/avb_util.c          |  9 +++++++++
 lib/libavb/avb_util.h          |  5 +++++
 6 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/cmd/avb.c b/cmd/avb.c
index a4de5c40..3d5e8732 100644
--- a/cmd/avb.c
+++ b/cmd/avb.c
@@ -10,6 +10,7 @@
 #include <env.h>
 #include <image.h>
 #include <malloc.h>
+#include <memalign.h>
 #include <mmc.h>
 
 #define AVB_BOOTARGS	"avb_bootargs"
@@ -88,7 +89,7 @@ int do_avb_read_part_hex(cmd_tbl_t *cmdtp, int flag, int argc,
 	offset = simple_strtoul(argv[2], NULL, 16);
 	bytes = simple_strtoul(argv[3], NULL, 16);
 
-	buffer = malloc(bytes);
+	buffer = malloc_cache_aligned(bytes);
 	if (!buffer) {
 		printf("Failed to tlb_allocate buffer for data\n");
 		return CMD_RET_FAILURE;
diff --git a/lib/libavb/avb_slot_verify.c b/lib/libavb/avb_slot_verify.c
index c0defdf9..e1069900 100644
--- a/lib/libavb/avb_slot_verify.c
+++ b/lib/libavb/avb_slot_verify.c
@@ -96,7 +96,7 @@ static AvbSlotVerifyResult load_full_partition(AvbOps* ops,
 
   /* Allocate and copy the partition. */
   if (!*out_image_preloaded) {
-    *out_image_buf = avb_malloc(image_size);
+    *out_image_buf = avb_malloc_cache_aligned(image_size);
     if (*out_image_buf == NULL) {
       return AVB_SLOT_VERIFY_RESULT_ERROR_OOM;
     }
@@ -654,7 +654,7 @@ static AvbSlotVerifyResult load_and_verify_vbmeta(
     }
   }
 
-  vbmeta_buf = avb_malloc(vbmeta_size);
+  vbmeta_buf = avb_malloc_cache_aligned(vbmeta_size);
   if (vbmeta_buf == NULL) {
     ret = AVB_SLOT_VERIFY_RESULT_ERROR_OOM;
     goto out;
diff --git a/lib/libavb/avb_sysdeps.h b/lib/libavb/avb_sysdeps.h
index f52428cc..33c0b91f 100644
--- a/lib/libavb/avb_sysdeps.h
+++ b/lib/libavb/avb_sysdeps.h
@@ -91,6 +91,17 @@ void avb_abort(void) AVB_ATTR_NO_RETURN;
  */
 void* avb_malloc_(size_t size) AVB_ATTR_WARN_UNUSED_RESULT;
 
+/* Allocates |size| bytes. Returns NULL if no memory is available,
+ * otherwise a pointer to the allocated memory.
+ *
+ * The memory is not initialized.
+ *
+ * The pointer returned is guaranteed to be aligned with ARCH_DMA_MINALIGN.
+ *
+ * The memory should be freed with avb_free() when you are done with it.
+ */
+void* avb_malloc_cache_aligned_(size_t size) AVB_ATTR_WARN_UNUSED_RESULT;
+
 /* Frees memory previously allocated with avb_malloc(). */
 void avb_free(void* ptr);
 
diff --git a/lib/libavb/avb_sysdeps_posix.c b/lib/libavb/avb_sysdeps_posix.c
index 4ccf41e4..2b958782 100644
--- a/lib/libavb/avb_sysdeps_posix.c
+++ b/lib/libavb/avb_sysdeps_posix.c
@@ -5,6 +5,7 @@
 
 #include <stdarg.h>
 #include <stdlib.h>
+#include <memalign.h>
 
 #include "avb_sysdeps.h"
 
@@ -55,6 +56,10 @@ void* avb_malloc_(size_t size) {
   return malloc(size);
 }
 
+void* avb_malloc_cache_aligned_(size_t size) {
+  return malloc_cache_aligned(size);
+}
+
 void avb_free(void* ptr) {
   free(ptr);
 }
diff --git a/lib/libavb/avb_util.c b/lib/libavb/avb_util.c
index 405d6253..f435f07d 100644
--- a/lib/libavb/avb_util.c
+++ b/lib/libavb/avb_util.c
@@ -183,6 +183,15 @@ void* avb_malloc(size_t size) {
   return ret;
 }
 
+void* avb_malloc_cache_aligned(size_t size) {
+  void* ret = avb_malloc_cache_aligned_(size);
+  if (ret == NULL) {
+    avb_error("Failed to allocate memory.\n");
+    return NULL;
+  }
+  return ret;
+}
+
 void* avb_calloc(size_t size) {
   void* ret = avb_malloc(size);
   if (ret == NULL) {
diff --git a/lib/libavb/avb_util.h b/lib/libavb/avb_util.h
index 26dc6b04..ff5d8cde 100644
--- a/lib/libavb/avb_util.h
+++ b/lib/libavb/avb_util.h
@@ -199,6 +199,11 @@ bool avb_str_concat(char* buf,
  */
 void* avb_malloc(size_t size) AVB_ATTR_WARN_UNUSED_RESULT;
 
+/* Like avb_malloc_() but aligned to ARCH_DMA_MINALIGN and prints a error
+ * using avb_error() if memory allocation fails.
+ */
+void* avb_malloc_cache_aligned(size_t size) AVB_ATTR_WARN_UNUSED_RESULT;
+
 /* Like avb_malloc() but sets the memory with zeroes. */
 void* avb_calloc(size_t size) AVB_ATTR_WARN_UNUSED_RESULT;
 
-- 
2.17.1

